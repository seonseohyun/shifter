#include <iostream>
#include <fstream>
#include <string>
#include <regex>
#include <cstdlib>
#include <stdexcept>
#include <cstdio>  // For sscanf

struct ParsedData {
    std::string name;
    std::string date;
    std::string fromShift;
    std::string toShift;
};

ParsedData parseNaturalLanguage(const std::string& input) {
    // Pattern for parsing: non-space for name (handles Korean), date, shifts
    std::regex pattern(R"((\S+)\s*(\d{4}-\d{2}-\d{2})\s*([A-Z])근무에서\s*([A-Z])근무로\s*변경을\s*희망합니다\.)");
    std::smatch matches;
    if (std::regex_match(input, matches, pattern)) {
        return {matches[1].str(), matches[2].str(), matches[3].str(), matches[4].str()};
    }
    throw std::invalid_argument("자연어 입력을 해석할 수 없습니다.");
}

void updateAndExecuteShiftScheduler(const std::string& naturalLanguageInput, const std::string& pythonFilePath) {
    try {
        // Step 1: Parse natural language
        ParsedData parsed = parseNaturalLanguage(naturalLanguageInput);

        // Step 2: Read Python file content
        std::ifstream fileIn(pythonFilePath);
        if (!fileIn.is_open()) {
            throw std::runtime_error("파일을 열 수 없습니다: " + pythonFilePath);
        }
        std::string pythonContent((std::istreambuf_iterator<char>(fileIn)), std::istreambuf_iterator<char>());
        fileIn.close();

        // Step 3: Find staff_id from name in staff_data
        std::regex staffPattern(R"(\{"name": "([^"]+)", "staff_id": (\d+),)");
        std::sregex_iterator iter(pythonContent.begin(), pythonContent.end(), staffPattern);
        std::sregex_iterator end;
        std::string staffId;
        for (; iter != end; ++iter) {
            std::smatch match = *iter;
            if (match[1].str() == parsed.name) {
                staffId = match[2].str();
                break;
            }
        }
        if (staffId.empty()) {
            throw std::runtime_error("해당 이름을 가진 직원을 찾을 수 없습니다.");
        }

        // Step 4: Calculate day index (assuming August 2025)
        int year, month, dayOfMonth;
        if (sscanf(parsed.date.c_str(), "%d-%d-%d", &year, &month, &dayOfMonth) != 3 ||
            year != 2025 || month != 8 || dayOfMonth < 1 || dayOfMonth > 31) {
            throw std::invalid_argument("유효하지 않은 날짜입니다. 2025-08-01 ~ 2025-08-31 범위여야 합니다.");
        }
        int day = dayOfMonth - 1;  // Day 0 is 2025-08-01

        // Step 5: Prepare insertion code for fixed constraint
        std::string insertCode = 
            "\n    # Fixed shift for " + parsed.name + " on day " + std::to_string(day) + " to " + parsed.toShift +
            "\n    sid = '" + staffId + "'"
            "\n    d = " + std::to_string(day) +
            "\n    s = '" + parsed.toShift + "'"
            "\n    model.Add(schedule[(sid, d, s)] == 1)\n";

        // Step 6: Find insertion point (before the coverage constraint comment)
        size_t insertPos = pythonContent.find("# Each day, at least one person per required shift (all except O)");
        if (insertPos == std::string::npos) {
            throw std::runtime_error("Python 코드에서 삽입 지점을 찾을 수 없습니다.");
        }
        pythonContent.insert(insertPos, insertCode);

        // Step 7: Backup original and save modified file
        std::string backupPath = pythonFilePath + ".bak";
        std::rename(pythonFilePath.c_str(), backupPath.c_str());
        std::ofstream fileOut(pythonFilePath);
        if (!fileOut.is_open()) {
            throw std::runtime_error("파일을 저장할 수 없습니다: " + pythonFilePath);
        }
        fileOut << pythonContent;
        fileOut.close();

        // Step 8: Execute Python script
        std::string command = "python " + pythonFilePath;
        int result = std::system(command.c_str());
        if (result != 0) {
            throw std::runtime_error("Python 실행 오류: 반환 코드 " + std::to_string(result));
        }

        std::cout << "근무표 생성이 완료되었습니다. 변경 요청이 반영되었습니다." << std::endl;
    } catch (const std::exception& ex) {
        std::cerr << "오류 발생: " << ex.what() << std::endl;
    }
}

int main() {
    // Example usage
    std::string input = "박주영 2025-08-05 D근무에서 E근무로 변경을 희망합니다.";
    std::string pythonPath = "shift_scheduler.py";
    updateAndExecuteShiftScheduler(input, pythonPath);
    return 0;
}