#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdint.h>

const std::string SERVER_HOST = "127.0.0.1";
const int SERVER_PORT = 6004;

class NurseScheduleClient {
private:
    int sockfd;
    
public:
    NurseScheduleClient() : sockfd(-1) {}
    
    ~NurseScheduleClient() {
        disconnect();
    }
    
    bool connect_to_server() {
        // ÏÜåÏºì ÏÉùÏÑ±
        sockfd = socket(AF_INET, SOCK_STREAM, 0);
        if (sockfd < 0) {
            std::cerr << "[ERROR] ÏÜåÏºì ÏÉùÏÑ± Ïã§Ìå®" << std::endl;
            return false;
        }
        
        // ÏÑúÎ≤Ñ Ï£ºÏÜå ÏÑ§Ï†ï
        struct sockaddr_in server_addr;
        memset(&server_addr, 0, sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(SERVER_PORT);
        server_addr.sin_addr.s_addr = inet_addr(SERVER_HOST.c_str());
        
        // ÏÑúÎ≤Ñ Ïó∞Í≤∞
        if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
            std::cerr << "[ERROR] ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå® (" << SERVER_HOST << ":" << SERVER_PORT << ")" << std::endl;
            close(sockfd);
            sockfd = -1;
            return false;
        }
        
        std::cout << "[INFO] ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ: " << SERVER_HOST << ":" << SERVER_PORT << std::endl;
        return true;
    }
    
    void disconnect() {
        if (sockfd >= 0) {
            close(sockfd);
            sockfd = -1;
        }
    }
    
    std::string send_request(const std::string& json_request) {
        if (sockfd < 0) {
            std::cerr << "[ERROR] ÏÑúÎ≤Ñ Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå" << std::endl;
            return "";
        }
        
        // JSON Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
        ssize_t sent_bytes = send(sockfd, json_request.c_str(), json_request.length(), 0);
        if (sent_bytes < 0) {
            std::cerr << "[ERROR] Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Ïã§Ìå®" << std::endl;
            return "";
        }
        
        std::cout << "[INFO] ÏöîÏ≤≠ Ï†ÑÏÜ° ÏôÑÎ£å: " << sent_bytes << " bytes" << std::endl;
        
        // ÏÜåÏºì Ïì∞Í∏∞ Ï¢ÖÎ£å
        shutdown(sockfd, SHUT_WR);
        
        // ÏùëÎãµ ÏàòÏã†
        std::string response;
        char buffer[4096];
        ssize_t received;
        
        while ((received = recv(sockfd, buffer, sizeof(buffer) - 1, 0)) > 0) {
            buffer[received] = '\0';
            response += buffer;
        }
        
        if (received < 0) {
            std::cerr << "[ERROR] ÏùëÎãµ ÏàòÏã† Ïã§Ìå®" << std::endl;
            return "";
        }
        
        std::cout << "[INFO] ÏùëÎãµ ÏàòÏã† ÏôÑÎ£å: " << response.length() << " bytes" << std::endl;
        return response;
    }
};

// Í∞ÑÌò∏ÏÇ¨ Ï†ïÎ≥¥ ÏÉùÏÑ±
std::string create_nurse_staff_data() {
    return R"({
        "staff": [
            {"name": "ÍπÄÏàòÎ†®", "staff_id": 1001, "grade": 3, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 195},
            {"name": "Ïù¥ÏòÅÌù¨", "staff_id": 1002, "grade": 4, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 190},
            {"name": "Î∞ïÎØºÏ†ï", "staff_id": 1003, "grade": 5, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 180},
            {"name": "ÏµúÏùÄÏòÅ", "staff_id": 1004, "grade": 3, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 200},
            {"name": "Ï†ïÏÜåÌù¨", "staff_id": 1005, "grade": 4, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 188},
            {"name": "ÌïúÎØ∏Îûò", "staff_id": 1006, "grade": 2, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 205},
            {"name": "Ïú§ÏÑúÏòÅ", "staff_id": 1007, "grade": 4, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 192},
            {"name": "Í∞ïÌòúÏßÑ", "staff_id": 1008, "grade": 3, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 198},
            {"name": "Ïò§ÏßÄÏùÄ", "staff_id": 1009, "grade": 5, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 175},
            {"name": "ÏÜ°ÎÇòÎ¶¨", "staff_id": 1010, "grade": 4, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 185},
            {"name": "ÏûÑÏßÄÌòÑ", "staff_id": 1011, "grade": 2, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 208},
            {"name": "Ï°∞ÏùÄÏÑú", "staff_id": 1012, "grade": 3, "position": "Í∞ÑÌò∏", "total_monthly_work_hours": 195}
        ]
    })";
}

// C++ ÌîÑÎ°úÌÜ†ÏΩú ÏöîÏ≤≠ ÏÉùÏÑ±
std::string create_cpp_protocol_request() {
    std::string staff_data = create_nurse_staff_data();
    
    std::string request = R"({
        "protocol": "gen_schedule",
        "data": {
            "staff_data": )" + staff_data + R"(,
            "position": "Í∞ÑÌò∏",
            "target_month": "2025-09",
            "custom_rules": {
                "shifts": ["Day", "Evening", "Night", "Off"],
                "shift_hours": {
                    "Day": 8,
                    "Evening": 8,
                    "Night": 8,
                    "Off": 0
                },
                "night_shifts": ["Night"],
                "off_shifts": ["Off"]
            }
        }
    })";
    
    return request;
}

// ÏùëÎãµ Î∂ÑÏÑù
void analyze_response(const std::string& response) {
    std::cout << "\n=== ÏùëÎãµ Î∂ÑÏÑù ===" << std::endl;
    
    if (response.empty()) {
        std::cout << "‚ùå ÏùëÎãµÏù¥ ÎπÑÏñ¥ÏûàÏùå" << std::endl;
        return;
    }
    
    std::cout << "üì¶ ÏùëÎãµ ÌÅ¨Í∏∞: " << response.length() << " bytes" << std::endl;
    
    // Í∏∞Î≥∏ ÏùëÎãµ Íµ¨Ï°∞ ÌôïÏù∏
    if (response.find("\"protocol\"") != std::string::npos) {
        std::cout << "‚úÖ C++ ÌîÑÎ°úÌÜ†ÏΩú ÏùëÎãµ ÌòïÏãù ÌôïÏù∏Îê®" << std::endl;
        
        if (response.find("\"py_gen_schedule\"") != std::string::npos) {
            std::cout << "‚úÖ ÏùëÎãµ ÌîÑÎ°úÌÜ†ÏΩú: py_gen_schedule" << std::endl;
        }
    } else {
        std::cout << "‚ùå C++ ÌîÑÎ°úÌÜ†ÏΩú ÏùëÎãµ ÌòïÏãù ÎàÑÎùΩ" << std::endl;
    }
    
    // ÏÑ±Í≥µ ÏùëÎãµ ÌôïÏù∏
    if (response.find("\"status\": \"ok\"") != std::string::npos) {
        std::cout << "‚úÖ Ïä§ÏºÄÏ§Ñ ÏÉùÏÑ± ÏÑ±Í≥µ" << std::endl;
        
        // Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        if (response.find("\"schedule\"") != std::string::npos) {
            std::cout << "‚úÖ Ïä§ÏºÄÏ§Ñ Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®Îê®" << std::endl;
        }
        
        // Ï≤òÎ¶¨ ÏãúÍ∞Ñ Ï∂îÏ∂ú
        size_t time_pos = response.find("\"solve_time\": \"");
        if (time_pos != std::string::npos) {
            size_t start = time_pos + 15;
            size_t end = response.find("\"", start);
            if (end != std::string::npos) {
                std::string solve_time = response.substr(start, end - start);
                std::cout << "‚è±Ô∏è Ï≤òÎ¶¨ ÏãúÍ∞Ñ: " << solve_time << std::endl;
            }
        }
        
        // ÏßÅÏõê Ïàò ÌôïÏù∏
        size_t staff_pos = response.find("\"staff_count\": ");
        if (staff_pos != std::string::npos) {
            size_t start = staff_pos + 16;
            size_t end = response.find(",", start);
            if (end == std::string::npos) end = response.find("}", start);
            if (end != std::string::npos) {
                std::string staff_count = response.substr(start, end - start);
                std::cout << "üë• ÏßÅÏõê Ïàò: " << staff_count << "Î™Ö" << std::endl;
            }
        }
        
        // ÏãúÌîÑÌä∏ ÏãùÎ≥Ñ ÌôïÏù∏
        if (response.find("\"shifts_identified\"") != std::string::npos) {
            std::cout << "üîç ÏãúÌîÑÌä∏ ÏãùÎ≥Ñ Ï†ïÎ≥¥ Ìè¨Ìï®Îê®" << std::endl;
        }
        
    } else if (response.find("\"status\": \"error\"") != std::string::npos || response.find("\"result\": \"ÏÉùÏÑ±Ïã§Ìå®\"") != std::string::npos) {
        std::cout << "‚ùå Ïä§ÏºÄÏ§Ñ ÏÉùÏÑ± Ïã§Ìå®" << std::endl;
        
        // Ïò§Î•ò ÏÇ¨Ïú† Ï∂îÏ∂ú
        size_t reason_pos = response.find("\"reason\": \"");
        if (reason_pos != std::string::npos) {
            size_t start = reason_pos + 11;
            size_t end = response.find("\"", start);
            if (end != std::string::npos) {
                std::string reason = response.substr(start, end - start);
                std::cout << "üìù Ïò§Î•ò ÏÇ¨Ïú†: " << reason << std::endl;
            }
        }
        
        // Ìï¥Í≤∞ Î∞©Ïïà ÌôïÏù∏
        if (response.find("\"suggestions\"") != std::string::npos) {
            std::cout << "üí° Ìï¥Í≤∞ Î∞©Ïïà Ï†úÏãúÎê®" << std::endl;
        }
    }
    
    // Ïã†Í∑úÍ∞ÑÌò∏ÏÇ¨ ÏïºÍ∞Ñ Í∑ºÎ¨¥ ÌôïÏù∏
    size_t schedule_start = response.find("\"schedule\"");
    if (schedule_start != std::string::npos) {
        std::cout << "\nüìä Ïã†Í∑úÍ∞ÑÌò∏ÏÇ¨ ÏïºÍ∞Ñ Í∑ºÎ¨¥ Î∂ÑÏÑù:" << std::endl;
        
        // grade 5 (Ïã†Í∑úÍ∞ÑÌò∏ÏÇ¨) + Night ÏãúÌîÑÌä∏ Í≤ÄÏÉâ
        int newbie_night_count = 0;
        size_t pos = 0;
        
        while ((pos = response.find("\"grade\": 5", pos)) != std::string::npos) {
            // Ìï¥Îãπ ÏÇ¨ÎûåÏù¥ Night ÏãúÌîÑÌä∏Ïóê Î∞∞Ï†ïÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            size_t shift_start = response.rfind("\"shift\": \"Night\"", pos);
            size_t people_start = response.rfind("\"people\"", pos);
            
            if (shift_start != std::string::npos && people_start != std::string::npos && shift_start > people_start) {
                newbie_night_count++;
            }
            pos++;
        }
        
        if (newbie_night_count == 0) {
            std::cout << "‚úÖ Ïã†Í∑úÍ∞ÑÌò∏ÏÇ¨ ÏïºÍ∞Ñ Í∑ºÎ¨¥ Í∏àÏßÄ Ï†úÏïΩ Ï†ïÏÉÅ ÏûëÎèô" << std::endl;
        } else {
            std::cout << "‚ùå Ïã†Í∑úÍ∞ÑÌò∏ÏÇ¨ ÏïºÍ∞Ñ Í∑ºÎ¨¥ " << newbie_night_count << "Í±¥ Î∞úÍ≤¨" << std::endl;
        }
    }
}

int main() {
    std::cout << "=== C++ ÎçîÎØ∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ - ÏãúÌîÑÌä∏ Ïä§ÏºÄÏ§ÑÎü¨ ÌÖåÏä§Ìä∏ ===" << std::endl;
    std::cout << "ÎåÄÏÉÅ: Python ÏÑúÎ≤Ñ (" << SERVER_HOST << ":" << SERVER_PORT << ")" << std::endl;
    std::cout << "ÏßÅÏõê Ïàò: 12Î™Ö Í∞ÑÌò∏ÏÇ¨" << std::endl;
    std::cout << "ÏãúÌîÑÌä∏: Day(8h), Evening(8h), Night(8h), Off(0h)" << std::endl;
    
    NurseScheduleClient client;
    
    // ÏÑúÎ≤Ñ Ïó∞Í≤∞
    if (!client.connect_to_server()) {
        std::cerr << "ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®. ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî." << std::endl;
        return 1;
    }
    
    // C++ ÌîÑÎ°úÌÜ†ÏΩú ÏöîÏ≤≠ ÏÉùÏÑ±
    std::string request = create_cpp_protocol_request();
    std::cout << "\nüì§ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞: " << request.length() << " bytes" << std::endl;
    std::cout << "üì§ ÌîÑÎ°úÌÜ†ÏΩú: gen_schedule" << std::endl;
    
    // ÏöîÏ≤≠ Ï†ÑÏÜ° Î∞è ÏùëÎãµ ÏàòÏã†
    std::string response = client.send_request(request);
    
    // Ïó∞Í≤∞ Ï¢ÖÎ£å
    client.disconnect();
    
    // ÏùëÎãµ Î∂ÑÏÑù
    if (!response.empty()) {
        analyze_response(response);
        
        std::cout << "\n=== Ï†ÑÏ≤¥ ÏùëÎãµ (Ï≤´ 500Ïûê) ===" << std::endl;
        std::cout << response.substr(0, 500);
        if (response.length() > 500) {
            std::cout << "..." << std::endl;
        }
        std::cout << std::endl;
    } else {
        std::cout << "‚ùå ÏùëÎãµÏùÑ Î∞õÏßÄ Î™ªÌñàÏäµÎãàÎã§." << std::endl;
        return 1;
    }
    
    std::cout << "\n‚úÖ ÌÖåÏä§Ìä∏ ÏôÑÎ£å" << std::endl;
    return 0;
}