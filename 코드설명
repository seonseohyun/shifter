shift_scheduler.py 파이썬 파일에서  change_request.json 파일을 읽고 제약사항을 추가하는 부분
model.Add(schedule[(sid, d, s)] ==1)

 # Load and apply change requests from JSON
    change_requests_path = "./data/change_requests.json"
    change_requests = []
    if os.path.exists(change_requests_path):
        try:
            with open(change_requests_path, "r", encoding="utf-8") as f:
                change_requests = json.load(f)
        except Exception as e:
            print(f"[WARNING] JSON 파일 읽기 오류: {e}")

    for req in change_requests:
        try:
            sid = str(req["staff_id"])
            req_date = datetime.strptime(req["date"], '%Y-%m-%d')
            d = (req_date - start_date).days
            s = req["desired_shift"]
            if 0 <= d < num_days and s in shifts and sid in [str(p["staff_id"]) for p in all_people]:
                model.Add(schedule[(sid, d, s)] == 1)
                print(f"[INFO] {sid}의 {req['date']} 근무를 {s}로 고정")
            else:
                print(f"[WARNING] 유효하지 않은 요청: staff_id={sid}, date={req['date']}, shift={s}")
        except Exception as e:
            print(f"[WARNING] 요청 처리 오류: {e}")

!설명!

주요 구조체 및 함수:

WorkItem: 클라이언트로부터 받은 JSON 문자열과 페이로드를 저장하는 구조체.
네트워크 관련 함수: recvExact, sendWorkItem, receiveWorkItem – 클라이언트와의 데이터 송수신을 처리합니다.


updateAndExecuteShiftScheduler: 근무 변경 요청을 처리하는 핵심 함수. JSON 파라미터를 직접 받아 change_requests.json을 생성/업데이트하고 Python 스크립트를 실행합니다.

generate_and_update_schedule: Python 스크립트 실행 후 생성된 time_table.json을 읽어 데이터베이스(duty_schedule 테이블)에 업데이트합니다.


create_db_connection: MySQL 데이터베이스 연결을 생성합니다.